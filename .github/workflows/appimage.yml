#
# Build and upload AppImage packages
#
name: "AppImage"

on:
  push:
    branches: [action/appimage]

jobs:
  # AppImage x86_64
  appimage-amd64:
    name: "x86_64"
    runs-on: ubuntu-18.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Build AppImage
      working-directory: ${{ github.workspace }}
      shell: bash
      run: |
        # Update installed packages
        sudo apt-get update -y
        sudo apt-get upgrade -y
        # Installing dependencies
        sudo apt-get install -y qtbase5-dev qtscript5-dev libqt5svg5-dev qttools5-dev-tools qttools5-dev libqt5opengl5-dev qtmultimedia5-dev libqt5multimedia5-plugins libqt5serialport5 libqt5serialport5-dev qtpositioning5-dev libgps-dev libqt5positioning5 libqt5positioning5-plugins zlib1g-dev libgl1-mesa-dev libdrm-dev cmake
        # Prepare to building
        mkdir -p ${{ github.workspace }}/artifact
        sudo chmod +x ${{ github.workspace }}/util/appimage/build-appimage.sh
        cd ${{ github.workspace }}/util/appimage
        ./build-appimage.sh
        cp ${{ github.workspace }}/builds/appimage/*.AppImage ${{ github.workspace }}/artifact

    - name: Upload AppImage
      uses: actions/upload-artifact@v2
      if: success()
      with:
        name: 'Stellarium-edge-x86_64'
        path: ${{ github.workspace }}/artifact/*.AppImage

  # AppImage ARM
  appimage-arm:
    name: "${{ matrix.arch }}"
    runs-on: ubuntu-18.04

    strategy:
      matrix:
        include:
          - arch: aarch64
          #- arch: armv7

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Build AppImage
      uses: uraimo/run-on-arch-action@v2.0.5
      id: appimage
      with:
        arch: ${{ matrix.arch }}
        distro: ubuntu18.04

        # Not required, but speeds up builds by storing container images in
        # a GitHub package registry.
        githubToken: ${{ github.GITHUB_TOKEN }}

        # Create an artifacts directory
        setup: |
          mkdir -p "${PWD}/artifact"

        # Mount the artifacts directory as /artifact in the container
        dockerRunArgs: |
          --volume "${PWD}/artifact:/artifact"

        # The shell to run commands with in the container
        shell: /bin/bash

        # Install some dependencies in the container. This speeds up builds if
        # you are also using githubToken. Any dependencies installed here will
        # be part of the container image that gets cached, so subsequent
        # builds don't have to re-install them. The image layer is cached
        # publicly in your project's package repository, so it is vital that
        # no secrets are present in the container state or logs.
        install: |
          # Update installed packages
          apt-get update -y
          apt-get upgrade -y
          # Installing dependencies
          apt-get install -y qtbase5-dev qtscript5-dev libqt5svg5-dev qttools5-dev-tools qttools5-dev libqt5opengl5-dev qtmultimedia5-dev libqt5multimedia5-plugins libqt5serialport5 libqt5serialport5-dev qtpositioning5-dev libgps-dev libqt5positioning5 libqt5positioning5-plugins zlib1g-dev libgl1-mesa-dev libdrm-dev cmake git sudo wget python3-pip python3-setuptools patchelf desktop-file-utils libgdk-pixbuf2.0-dev fakeroot
          pip3 install appimage-builder

        # Produce a binary artifact and place it in the mounted volume
        run: |
          mkdir -p ${{ github.workspace }}/artifact
          chmod +x ${{ github.workspace }}/util/appimage/build-appimage-docker.sh
          cd ${{ github.workspace }}/util/appimage
          ./build-appimage-docker.sh
          cp ${{ github.workspace }}/builds/appimage/*.AppImage /artifact

    - name: Upload AppImage
      uses: actions/upload-artifact@v2
      if: success()
      with:
        name: 'Stellarium-edge-${{ matrix.arch }}'
        path: ${{ github.workspace }}/artifact/*.AppImage
