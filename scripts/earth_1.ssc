// Author: Qam1
// Version: 12.0
// License: Public Domain
// Name: Earth best views from other bodies
// Description: Best views of Earth from other Solar System bodies in the 21st Century.

// Made on Stellarium 0.20.2

//basics
var spd = 5; // speed for screen saver mode in seconds
StelSkyDrawer.setFlagLuminanceAdaptation(false);
var o = 1;
var i = 1;
var sl = StarMgr.getLabelsAmount();
var pk = 0




LabelMgr.deleteAllLabels();
var ss = -1;

// Labels
var txt1 = LabelMgr.labelScreen("Press N for next outer body", 470, 60, false, 35, "#FF0000");
LabelMgr.setLabelShow(txt1, true);

txt1 = LabelMgr.labelScreen("Press B to go back to the last inner body", 470, 120, false, 35, "#FF0000");
LabelMgr.setLabelShow(txt1, true);

txt1 = LabelMgr.labelScreen("Press F  to toggle flags and labels", 470, 180, false, 35, "#FF0000");
LabelMgr.setLabelShow(txt1, true);

txt1 = LabelMgr.labelScreen("Press S  toggle screen saver mode", 470, 240, false, 35, "#FF0000");
LabelMgr.setLabelShow(txt1, true);

txt1 = LabelMgr.labelScreen("By Qam1", 770, 140, false, 15, "#FF0000");
LabelMgr.setLabelShow(txt1, true);

spd = spd * 4;

// program
var q = 0;
while (q == 0)
{
	if (o == 1)
	{
		core.selectObjectByName("Earth", pointer = true);
		StelMovementMgr.setFlagTracking(true);

		SolarSystem.setFlagOrbits(true);

		SolarSystem.setLabelsAmount(20);
		StarMgr.setLabelsAmount(sl);
		ConstellationMgr.setFlagLines(true);
		ConstellationMgr.setFlagLabels(true);
		GridLinesMgr.setFlagEclipticLine(true);
		GridLinesMgr.setFlagEquatorLine(true);
	}

	if (o == -1)
	{
		core.selectObjectByName("Earth", pointer = false);
		StelMovementMgr.setFlagTracking(true);

		SolarSystem.setFlagOrbits(false);

		SolarSystem.setLabelsAmount(-20);
		StarMgr.setLabelsAmount(-20);
		ConstellationMgr.setFlagLines(false);
		ConstellationMgr.setFlagLabels(false);
		GridLinesMgr.setFlagEclipticLine(false);
		GridLinesMgr.setFlagEquatorLine(false);
	}

	if (i == 1) 
	{
		LandscapeMgr.setFlagAtmosphere(false);
		LandscapeMgr.setFlagFog(false);
		LandscapeMgr.setCurrentLandscapeID("moon");

		core.setDate("2061-05-31T01:04:47", "utc");
		core.setObserverLocation(91.80, 44.24, 7, 1, "", "Mercury");
		StelMovementMgr.zoomTo(64, 1);

		SolarSystem.setFlagOrbits(false);

		sd = 176 
		sw = 1232;


	}

	if (i == 2) 
	{
		LandscapeMgr.setFlagAtmosphere(true);
		LandscapeMgr.setFlagFog(true);
		LandscapeMgr.setCurrentLandscapeID("moon");

		core.setDate("2093-12-17T12:04:47", "utc");
		core.setObserverLocation(6.7, 40.3, 50000, 1, "", "Venus");
		StelMovementMgr.zoomTo(90, 1);

		SolarSystem.setFlagOrbits(false);

		sd = 116;
		sw = 1709;
	}





	if (i == 3) 
	{
		
		

		LandscapeMgr.setFlagAtmosphere(false);
		LandscapeMgr.setFlagFog(false);
		LandscapeMgr.setCurrentLandscapeID("moon");

		core.setDate("2049-01-04T01:10:00", "utc");
		core.setObserverLocation(0.7, 0.0, 50, 1, "", "Moon");
		StelMovementMgr.zoomTo(12, 1);

		SolarSystem.setFlagOrbits(false);

		sd = 1;
		sw = 7;
	}





	if (i == 4) 
	{
		LandscapeMgr.setFlagAtmosphere(true);
		LandscapeMgr.setFlagFog(true);
		LandscapeMgr.setCurrentLandscapeID("mars");
		
		core.setObserverLocation(-175.399994, -14.48, 17, 1, "", "Mars");
		core.setDate("2099-07-26T04:16:00", "utc");
		LandscapeMgr.setFlagAtmosphere(true);

		StelMovementMgr.zoomTo(62, 1);

SolarSystem.setFlagOrbits(true);


		sd = 1;
		sw = 7;


	}

	if (i == 5) 
	{
		LandscapeMgr.setFlagAtmosphere(false);
		LandscapeMgr.setFlagFog(false);
		LandscapeMgr.setCurrentLandscapeID("ocean");

		core.setDate("2082-10-19T21:08:21", "utc");
		core.setObserverLocation(-179.71, 44.24, 17, 1, "", "(1) Ceres");
		StelMovementMgr.zoomTo(42, 1);

		sd = 1;
		sw = 7;
	}

	if (i == 6) 
	{
		LandscapeMgr.setFlagAtmosphere(true);
		LandscapeMgr.setFlagFog(true);
		LandscapeMgr.setCurrentLandscapeID("jupiter");

		core.setDate("2058-07-15T11:52:00", "utc");
		core.setObserverLocation(121.71, 27.24, 71492000, 1, "", "Jupiter");
		StelMovementMgr.zoomTo(34, 1);

		txt1 = LabelMgr.labelScreen("Elongation: 11.849 degrees", 350, 10, false, 25, "#AAFFAA");
		LabelMgr.setLabelShow(txt1, true);
	}

	if (i == 7) 
	{
		LandscapeMgr.setFlagAtmosphere(true);
		LandscapeMgr.setFlagFog(true);
		LandscapeMgr.setCurrentLandscapeID("saturn");

		core.setDate("2031-09-16T10:48:57", "utc");
		core.setObserverLocation(-73.71, 9.24, 200000, 1, "", "Saturn");
		core.wait(0.1);
		StelMovementMgr.zoomTo(28, 1);

		txt1 = LabelMgr.labelScreen("Elongation: 6.390 degrees", 350, 10, false, 25, "#AAFFAA");
		LabelMgr.setLabelShow(txt1, true);
	}

	if (i == 8) 
	{
		LandscapeMgr.setFlagAtmosphere(true);
		LandscapeMgr.setFlagFog(true);
		LandscapeMgr.setCurrentLandscapeID("uranus");

		core.setDate("2052-06-16T11:00:00", "utc");
		core.setObserverLocation(57.73, 60.0, 30268000, 1, "", "Uranus");
		StelMovementMgr.zoomTo(15.6, 1);

		txt1 = LabelMgr.labelScreen("Elongation: 3.186 degrees", 350, 10, false, 25, "#AAFFAA");
		LabelMgr.setLabelShow(txt1, true);


		sd = 1;
		sw = 7;
	}

	if (i == 9) 
	{
		LandscapeMgr.setFlagAtmosphere(true);
		LandscapeMgr.setFlagFog(true);
		LandscapeMgr.setCurrentLandscapeID("neptune");

		core.setDate("2035-07-17T15:00:00", "utc");
		core.setObserverLocation(94.71, 11.24, 24764000, 1, "", "Neptune");
		StelMovementMgr.zoomTo(10.6, 1);

		txt1 = LabelMgr.labelScreen("Elongation: 1.952 degrees", 350, 10, false, 25, "#AAFFAA");
		LabelMgr.setLabelShow(txt1, true);

		sd = 1;
		sw = 7;
	}

	if (i == 10) 
	{
		LandscapeMgr.setFlagAtmosphere(false);
		LandscapeMgr.setFlagFog(false);
		LandscapeMgr.setCurrentLandscapeID("moon");

		core.setDate("2000-09-01T12:35:49", "utc");
		core.setObserverLocation(38.49, 62.04, 76, 1, "", "Pluto");
		StelMovementMgr.zoomTo(25, 1);

		txt1 = LabelMgr.labelScreen("Elongation: 1.908 degrees", 500, 10, false, 25, "#AAFFAA");
		LabelMgr.setLabelShow(txt1, true);


	
	}



	if (i == 11) 
	{
		LandscapeMgr.setFlagAtmosphere(false);
		LandscapeMgr.setFlagFog(false);
		LandscapeMgr.setCurrentLandscapeID("moon");

		core.setDate("2073-09-28T06:44:16", "utc");
		core.setObserverLocation(1.49, 1.04, 76, 1, "", "Sedna");
		StelMovementMgr.zoomTo(3.14, 1);

		txt1 = LabelMgr.labelScreen("Elongation: 0.756 degrees", 500, 10, false, 25, "#AAFFAA");
		LabelMgr.setLabelShow(txt1, true);


	
	}


	if (i == 12) 
	{
		LandscapeMgr.setFlagAtmosphere(false);
		LandscapeMgr.setFlagFog(false);
		LandscapeMgr.setCurrentLandscapeID("moon");

		core.setDate("2099-08-06T07:47:31", "utc");
		core.setObserverLocation(38.49, 31.04, 76, 1, "", "Eris");
		StelMovementMgr.zoomTo(25, 1);

		txt1 = LabelMgr.labelScreen("Elongation: 0.692 degrees", 500, 10, false, 25, "#AAFFAA");
		LabelMgr.setLabelShow(txt1, true);


	
	}




var d = 1

ob = ConstellationMgr.getFlagBoundaries(); 
od = NebulaMgr.getFlagHints();

of = LandscapeMgr.getFlagFog();
os = StarMgr.getFlagStars(); 

oq = LandscapeMgr.getFlagCardinalsPoints();


while (d == 1)
{


core.wait(0.25);
pk = pk + 1

if (ss == -1)
{
pk = 0
}


cb = ConstellationMgr.getFlagBoundaries(); 


if (cb != ob)
{
i = i-1
d =2

ConstellationMgr.setFlagBoundaries(ob); 

}

cd = NebulaMgr.getFlagHints();


if (cd != od)
{
i = i+1
d =2
NebulaMgr.setFlagHints(od);

}


cf = LandscapeMgr.getFlagFog();


if (cf != of)
{
o = o * -1
d =2
LandscapeMgr.setFlagFog(ob);
}


cs = StarMgr.getFlagStars(); 


if (cs != os)
{
ss = ss * -1
d =2

StarMgr.setFlagStars(os); 

LabelMgr.deleteAllLabels();

//toggle screen saver

if (ss == -1)
{
txt1 = LabelMgr.labelScreen("Screensaver Mode off", 400, 20, false, 25, "#F6A101");
LabelMgr.setLabelShow(txt1, true);
core.wait(1);
}
else
{
txt1 = LabelMgr.labelScreen("Screensaver Mode on", 400, 20, false, 25, "#F6A101");
LabelMgr.setLabelShow(txt1, true);
}
core.wait(1);


} //ss


if (pk > spd)
{
i = i + 1
d = 2
pk = 0
}



} //d


ConstellationMgr.setFlagBoundaries(ob); 
NebulaMgr.getFlagHints(od);

LandscapeMgr.getFlagFog(of);
StarMgr.getFlagStars(os); 



if (i > 12)
{
i = 1
}


if (i < 1)
{
i = 12
}





	LabelMgr.deleteAllLabels();
}

